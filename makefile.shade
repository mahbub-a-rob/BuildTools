
var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'

use-standard-lifecycle
k-standard-goals

#xml-docs-test .clean .build-compile description='Check generated XML documentation files for errors' target='test'
  k-xml-docs-test

#nuget-pack target='package'
  @{
    var configuration = Environment.GetEnvironmentVariable("Configuration") ?? "Debug";

    var dependenciesPackagerPath = Path.Combine(BASE_DIR, "src", "DependenciesPackager");
    Exec("dotnet", "publish " + dependenciesPackagerPath + " --no-build " + "--configuration " + configuration);

    var packagecacheUploaderPath = Path.Combine(BASE_DIR, "src", "PackageCacheUploader");
    Exec("dotnet", "publish " + packagecacheUploaderPath + " --no-build " + "--configuration " + configuration);

    var apiCheckPath = Path.Combine(BASE_DIR, "src", "Microsoft.AspNetCore.BuildTools.ApiCheck");
    Exec("dotnet", "publish " + apiCheckPath + " --no-build " + "--configuration " + configuration);

    foreach(var project in new[]{ "NuGetPackageVerifier", "SplitPackages", "DependenciesPackager", "PackageCacheUploader", "Microsoft.AspNetCore.BuildTools.ApiCheck" })
    {
      var outputDir = Path.Combine(TARGET_DIR, "build");
      var existingNupkg = Directory.EnumerateFiles(outputDir)
        .Select(p => Path.GetFileName(p))
        .First(fn => fn.StartsWith(project) && fn.EndsWith(".nupkg"));

      var version = Path.GetFileNameWithoutExtension(existingNupkg).Substring(project.Length + 1);
      var nuspecPath = Path.Combine("src", project, project + ".nuspec");
      var basePath = Path.Combine(outputDir, project, configuration);

      if (project == "DependenciesPackager")
      {
          basePath = Path.Combine(dependenciesPackagerPath, "bin", configuration, "netcoreapp1.0", "publish");
      }

      if (project == "PackageCacheUploader")
      {
          basePath = Path.Combine(packagecacheUploaderPath, "bin", configuration, "netcoreapp1.0", "publish");
      }

      if (project == "Microsoft.AspNetCore.BuildTools.ApiCheck")
      {
          basePath = Path.Combine(apiCheckPath, "bin", configuration);
      }

      Exec(".build/NuGet.exe", "pack -nopack " + nuspecPath + " -version " + version + " -base " + basePath + " -out " + outputDir);
    }
  }
